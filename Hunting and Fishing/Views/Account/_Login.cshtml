@model Hunting_and_Fishing.Models.LogIn



@using (Html.BeginForm("Login", "Account", FormMethod.Post))
{
    
    <form class="form-horizontal loginFrm" name="myform">

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group" id="uname">
            
            @Html.LabelFor(model => model.Username)

            @Html.TextBoxFor(model => model.Username, new {@Id="name", @required = "required" })

        </div>

        <div class="form-group">
            
             @Html.LabelFor(model => model.Password)

             @Html.PasswordFor(model => model.Password, new { @Id="comment", @required = "required"})
        
        </div>

        <div class="button">

            <input type="submit" value="Sign in" class="btn btn-default" onclick="validate()"/>
            <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>

        </div>
    </form>
    <script>
    var createAllErrors = function() {
        var form = $( this ),
            errorList = $( "ul.errorMessages", form );

        var showAllErrorMessages = function() {
            errorList.empty();

            // Find all invalid fields within the form.
            var invalidFields = form.find( ":invalid" ).each( function( index, node ) {

                // Find the field's corresponding label
                var label = $( "label[for=" + node.id + "] "),
                    // Opera incorrectly does not fill the validationMessage property.
                    message = node.validationMessage || 'Invalid value.';

                errorList
                    .show()
                    .append( "<li><span>" + label.html() + "</span> " + message + "</li>" );
            });
        };

        // Support Safari
        form.on( "submit", function( event ) {
            if ( this.checkValidity && !this.checkValidity() ) {
                $( this ).find( ":invalid" ).first().focus();
                event.preventDefault();
            }
        });

        $( "input[type=submit], button:not([type=button])", form )
            .on( "click", showAllErrorMessages);

        $( "input", form ).on( "keypress", function( event ) {
            var type = $( this ).attr( "type" );
            if ( /date|email|month|number|search|tel|text|time|url|week/.test ( type )
              && event.keyCode == 13 ) {
                showAllErrorMessages();
            }
        });
    };

    $( "form" ).each( createAllErrors );
    </script>
}
